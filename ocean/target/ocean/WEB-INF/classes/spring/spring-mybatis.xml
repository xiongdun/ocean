<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
   	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd    
    http://www.springframework.org/schema/context    
    http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd   
    http://www.springframework.org/schema/mvc    
    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
	
	<!-- 1.自动扫描 -->
	<context:component-scan base-package="com.brucex.*" />
	<!-- 2.引入数据源配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:common.properties" />
	</bean>
	
	<!--数据源加密操作 -->  
    <bean id="dbPasswordCallback" class="com.brucex.common.datasource.DBPasswordCallback" lazy-init="true" /> 
	
	<!-- 3.定义数据源连接池此处改用alibaba druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->  
		<property name="initialSize" value="1" />  
		<property name="minIdle" value="1" />   
		<property name="maxActive" value="20" />  
		<!-- 配置获取连接等待超时的时间 -->  
		<property name="maxWait" value="60000" />  
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
    	<property name="timeBetweenEvictionRunsMillis" value="60000" />  
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
    	<property name="minEvictableIdleTimeMillis" value="300000" />  
    	<property name="validationQuery" value="${jdbc.testsql}" />  
    	<property name="testWhileIdle" value="true" />
    	<property name="testOnBorrow" value="false" />
    	<property name="testOnReturn" value="false" />  
    	<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
    	<property name="poolPreparedStatements" value="true" />  
    	<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
    	<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
    	<property name="filters" value="stat" />
    	
    	<!-- 密数据库连接回调密码解密-->
   		<property name="passwordCallback" ref="dbPasswordCallback" />
		<property name="connectionProperties" value="password=${jdbc.password}" /> 
	</bean>
	
	<!-- 4.spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引用数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapper.xml文件 -->
		<property name="mapperLocations" value="classpath:/mappings/modules/**/*.xml"/>
		<!-- 引入类型别名包，则自动扫描该包下的实体bean,别名自动将简单类名设为该类名 -->
		<property name="typeAliasesPackage" value="com.brucex.modules"/>
		<property name="typeAliasesSuperType" value="com.brucex.common.entity.BaseEntity" />
		<property name="configLocation" value="classpath:mybatis/mybatis-plugins.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 引用上文中定义的sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<property name="basePackage" value="com.brucex.modules" />
	</bean>

	<!-- 6.(事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 引用上文中定义的数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	
	<!-- 7.声明式事务管理 -->
	<tx:annotation-driven/>
</beans>  